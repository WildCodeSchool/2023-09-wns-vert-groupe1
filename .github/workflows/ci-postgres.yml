name: PostgreSQL Service Example
on: push

jobs:
  demo-job:
    runs-on: ubuntu-latest
    # Service de container qui seront accessible DANS demo-job
    services:
      # Label utilisé pour accéder à ce service
      postgres:
        # Image docker Hub
        image: postgres
        # Infos de connexion (à vous de choisir!)
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # health checks pour être sûr que postgres a démarré
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # mapping tcp des ports pour permettre d'ouvrir le port à l'hôte
          - 5432:5432

    steps:
      - name: Check out du repo
        uses: actions/checkout@v3

      - name: Installation des dépendances
        run: npm ci

      - name: Connection à PostgreSQL
        # Ici, pour la démo, simple lancement d'un script qui créé les table PostgreSQL, pré-
        # rempli des données et les récupère (c'est là que vous faites vos tests, ça pourrait
        # tout aussi bien être un npx jest ici ;))
        run: test-e2e/node client.js
        # Variables d'environnement utilisées PAR `client.js` pour se connecter à la base
        # Ces variables peuvent être chargées soit pour une step comme c'est le cas ici, soit
        # pour TOUTES les steps si ça avait été placé avant les steps, soit dans TOUS les jobs
        # si ça avait été placé avant les jobs!
        env:
          # Localhost est possible car l'hôte communique avec le service
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
